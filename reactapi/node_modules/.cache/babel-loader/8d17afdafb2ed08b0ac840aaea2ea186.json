{"ast":null,"code":"var _jsxFileName = \"C:\\\\steamAPI-Test-Project\\\\reactapi\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\n\nrequire('dotenv').config();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isLoaded: false,\n      steamId: process.env.REACT_APP_STEAM_ID,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    fetch(`/IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${this.state.steamId}&format=json&include_appinfo=true`, {\n      \"headers\": {\n        \"Accept\": \"application.json\"\n      }\n    }).then(res => res.json()).then(json => {\n      this.setState({\n        isLoaded: true,\n        data: json.response\n      });\n    }).catch(err => {\n      this.setState({\n        isLoaded: true,\n        error: err\n      });\n    });\n  }\n\n  handleChange(e) {\n    this.setState({\n      steamId: e\n    });\n  }\n\n  handleClick() {\n    this.componentDidMount();\n  }\n\n  render() {\n    var {\n      isLoaded,\n      data\n    } = this.state;\n\n    if (!isLoaded) {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \" Loading Data, Please Wait... \");\n    } else if (data.game_count) {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Game List for ID: \", process.env.REACT_APP_STEAM_ID), React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.steamId,\n        onChange: e => this.handleChange(e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"btn\",\n        type: \"button\",\n        value: \"Submit\",\n        onClick: e => this.handleClick(e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Game Count: \", data.game_count), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, data.games.map(game => React.createElement(\"li\", {\n        key: game.appid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, game.name, \":\"), \" \", Math.floor(game.playtime_forever / 60), \" hours, \", Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60), \"minutes.\")), \";\"));\n    } else if (this.state.error !== null) {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \" Invalid Supplied Steam ID. \");\n    } else {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \" Issue Connecting to Steam API Service... \");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/steamAPI-Test-Project/reactapi/src/App.js"],"names":["React","Component","require","config","App","constructor","props","state","data","isLoaded","steamId","process","env","REACT_APP_STEAM_ID","error","componentDidMount","fetch","REACT_APP_API_KEY","then","res","json","setState","response","catch","err","handleChange","e","handleClick","render","game_count","target","value","games","map","game","appid","name","Math","floor","playtime_forever","round"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAE1BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBAHV;AAIXC,MAAAA,KAAK,EAAE;AAJI,KAAb;AAMD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAE,4CAA2CL,OAAO,CAACC,GAAR,CAAYK,iBAAkB,YAAW,KAAKV,KAAL,CAAWG,OAAQ,mCAAzG,EACH;AACE,iBACA;AACE,kBAAU;AADZ;AAFF,KADG,CAAL,CAOGQ,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPf,EAQGF,IARH,CAQQE,IAAI,IAAI;AACZ,WAAKC,QAAL,CAAc;AACZZ,QAAAA,QAAQ,EAAE,IADE;AAEZD,QAAAA,IAAI,EAAEY,IAAI,CAACE;AAFC,OAAd;AAID,KAbH,EAcGC,KAdH,CAcSC,GAAG,IAAI;AACZ,WAAKH,QAAL,CAAc;AACZZ,QAAAA,QAAQ,EAAE,IADE;AAEZK,QAAAA,KAAK,EAAEU;AAFK,OAAd;AAID,KAnBH;AAoBD;;AAEDC,EAAAA,YAAY,CAACC,CAAD,EAAI;AACd,SAAKL,QAAL,CAAc;AAAEX,MAAAA,OAAO,EAAEgB;AAAX,KAAd;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,SAAKZ,iBAAL;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,QAAI;AAAEnB,MAAAA,QAAF;AAAYD,MAAAA;AAAZ,QAAqB,KAAKD,KAA9B;;AAEA,QAAI,CAACE,QAAL,EAAe;AACb,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAP;AACD,KAFD,MAGK,IAAID,IAAI,CAACqB,UAAT,EAAqB;AACxB,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAuBlB,OAAO,CAACC,GAAR,CAAYC,kBAAnC,CADF,EAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAE,KAAKN,KAAL,CAAWG,OAFpB;AAGE,QAAA,QAAQ,EAAEgB,CAAC,IAAI,KAAKD,YAAL,CAAkBC,CAAC,CAACI,MAAF,CAASC,KAA3B,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAOE;AACE,QAAA,SAAS,EAAC,KADZ;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,KAAK,EAAC,QAHR;AAIE,QAAA,OAAO,EAAEL,CAAC,IAAI,KAAKC,WAAL,CAAiBD,CAAC,CAACI,MAAF,CAASC,KAA1B,CAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAiBvB,IAAI,CAACqB,UAAtB,CAbF,EAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGrB,IAAI,CAACwB,KAAL,CAAWC,GAAX,CAAeC,IAAI,IAClB;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAASD,IAAI,CAACE,IAAd,MADF,OACiCC,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACK,gBAAL,GAAwB,EAAnC,CADjC,cACiFF,IAAI,CAACG,KAAL,CAAW,CAACN,IAAI,CAACK,gBAAL,GAAwB,EAAxB,GAA6BF,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACK,gBAAL,GAAwB,EAAnC,CAA9B,IAAwE,EAAnF,CADjF,aADD,CADH,MAdF,CADF;AAwBD,KAzBI,MA0BA,IAAI,KAAKhC,KAAL,CAAWO,KAAX,KAAqB,IAAzB,EAA+B;AAClC,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAP;AACD,KAFI,MAGA;AACH,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAAP;AACD;AACF;;AAjFyB;;AAoF5B,eAAeV,GAAf","sourcesContent":["import React, { Component } from 'react';\nrequire('dotenv').config();\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isLoaded: false,\n      steamId: process.env.REACT_APP_STEAM_ID,\n      error: null\n    }\n  }\n\n  componentDidMount() {\n    fetch(`/IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${this.state.steamId}&format=json&include_appinfo=true`,\n      {\n        \"headers\":\n        {\n          \"Accept\": \"application.json\"\n        }\n      })\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          isLoaded: true,\n          data: json.response\n        })\n      })\n      .catch(err => {\n        this.setState({\n          isLoaded: true,\n          error: err\n        })\n      });\n  }\n\n  handleChange(e) {\n    this.setState({ steamId: e });\n  }\n\n  handleClick() {\n    this.componentDidMount();\n  }\n\n  render() {\n    var { isLoaded, data } = this.state;\n\n    if (!isLoaded) {\n      return <h2> Loading Data, Please Wait... </h2>\n    }\n    else if (data.game_count) {\n      return (\n        <div className=\"App\">\n          <h1>Game List for ID: {process.env.REACT_APP_STEAM_ID}</h1>\n          <input\n            type=\"text\"\n            value={this.state.steamId}\n            onChange={e => this.handleChange(e.target.value)}\n          />\n          <input\n            className=\"btn\"\n            type=\"button\"\n            value=\"Submit\"\n            onClick={e => this.handleClick(e.target.value)}\n          />\n          <h2>Game Count: {data.game_count}</h2>\n          <ul>\n            {data.games.map(game => (\n              <li key={game.appid}>\n                <strong>{game.name}:</strong> {Math.floor(game.playtime_forever / 60)} hours, {Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60)}minutes.\n            </li>\n            ))};\n          </ul>\n        </div>\n      );\n    }\n    else if (this.state.error !== null) {\n      return <h2> Invalid Supplied Steam ID. </h2>\n    }\n    else {\n      return <h2> Issue Connecting to Steam API Service... </h2>\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}