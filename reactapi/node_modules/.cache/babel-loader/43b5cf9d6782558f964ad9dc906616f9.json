{"ast":null,"code":"var _jsxFileName = \"C:\\\\steamAPI-Test-Project\\\\reactapi\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\n\nrequire('dotenv').config();\n\nfunction getURL(steamId) {\n  return `/IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${steamId}&format=json&include_appinfo=true`;\n}\n\nfunction handleChange(e) {\n  this.setState({\n    [e.target.name]: e.target.value\n  });\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isLoaded: false,\n      steamId: process.env.REACT_APP_STEAM_ID\n    };\n  }\n\n  componentDidMount() {\n    fetch(getURL(this.state.steamId), {\n      \"headers\": {\n        \"Accept\": \"application.json\"\n      }\n    }).then(res => res.json()).then(json => {\n      this.setState({\n        isLoaded: true,\n        data: json.response\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    var {\n      isLoaded,\n      data\n    } = this.state;\n\n    if (!isLoaded) {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \" Loading Data... \");\n    } else if (data.game_count) {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.steamId,\n        placeholder: \"asdas\",\n        onChange: handleChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Game List for ID: \", process.env.REACT_APP_STEAM_ID), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Game Count: \", data.game_count), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, data.games.map(game => React.createElement(\"li\", {\n        key: game.appid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, game.name, \":\"), \" \", Math.floor(game.playtime_forever / 60), \" hours, \", Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60), \"minutes.\")), \";\"));\n    } else {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \" Issue Connecting to Steam API Service... \");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/steamAPI-Test-Project/reactapi/src/App.js"],"names":["React","Component","require","config","getURL","steamId","process","env","REACT_APP_API_KEY","handleChange","e","setState","target","name","value","App","constructor","props","state","data","isLoaded","REACT_APP_STEAM_ID","componentDidMount","fetch","then","res","json","response","catch","err","console","log","render","game_count","bind","games","map","game","appid","Math","floor","playtime_forever","round"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nrequire('dotenv').config();\n\nfunction getURL( steamId ) {\n  return `/IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${steamId}&format=json&include_appinfo=true`\n}\n\nfunction handleChange(e) {\n  this.setState({ [e.target.name] : e.target.value });\n}\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isLoaded: false,\n      steamId: process.env.REACT_APP_STEAM_ID\n    }\n  }\n\n  componentDidMount() {\n    fetch(getURL( this.state.steamId ),\n      {\n        \"headers\":\n        {\n          \"Accept\": \"application.json\"\n        }\n      })\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          isLoaded: true,\n          data: json.response\n        })\n      })\n      .catch(err => {\n        console.log(err)\n      });\n  }\n\n  render() {\n    var { isLoaded, data } = this.state;\n    if (!isLoaded) {\n      return <h2> Loading Data... </h2>\n    }\n    else if (data.game_count) {\n      return (\n        <div className=\"App\">\n          <input\n            type=\"text\"\n            value={this.state.steamId}\n            placeholder=\"asdas\"\n            onChange={handleChange.bind(this)}\n          />\n          <h1>Game List for ID: {process.env.REACT_APP_STEAM_ID}</h1>\n          <h2>Game Count: {data.game_count}</h2>\n          <ul>\n            {data.games.map(game => (\n              <li key={game.appid}>\n                <strong>{game.name}:</strong> {Math.floor(game.playtime_forever / 60)} hours, {Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60)}minutes.\n            </li>\n            ))};\n        </ul>\n        </div>\n      );\n    }\n    else {\n      return <h2> Issue Connecting to Steam API Service... </h2>\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}