{"ast":null,"code":"var _jsxFileName = \"C:\\\\steamAPI-Test-Project\\\\reactapi\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\n\nrequire('dotenv').config();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isLoaded: false,\n      steamId: process.env.REACT_APP_STEAM_ID\n    };\n  }\n\n  componentDidMount() {\n    fetch(`/IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${process.env.REACT_APP_STEAM_ID}&format=json&include_appinfo=true`, {\n      \"headers\": {\n        \"Accept\": \"application.json\"\n      }\n    }).then(res => res.json()).then(json => {\n      this.setState({\n        isLoaded: true,\n        data: json.response\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  handleChange() {\n    this.setState({\n      input: e.target.value\n    });\n  }\n\n  handleClick() {\n    console.log(this.state.input);\n  }\n\n  render() {\n    var {\n      isLoaded,\n      data\n    } = this.state;\n\n    if (!isLoaded) {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \" Loading Data, Please Wait... \");\n    } else if (data.game_count) {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Game List for ID: \", process.env.REACT_APP_STEAM_ID), React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.steamId,\n        onChange: e => this.handleChange(e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Game Count: \", data.game_count), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, data.games.map(game => React.createElement(\"li\", {\n        key: game.appid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, game.name, \":\"), \" \", Math.floor(game.playtime_forever / 60), \" hours, \", Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60), \"minutes.\")), \";\"));\n    } else {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \" Issue Connecting to Steam API Service... \");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/steamAPI-Test-Project/reactapi/src/App.js"],"names":["React","Component","require","config","App","constructor","props","state","data","isLoaded","steamId","process","env","REACT_APP_STEAM_ID","componentDidMount","fetch","REACT_APP_API_KEY","then","res","json","setState","response","catch","err","console","log","handleChange","input","e","target","value","handleClick","render","game_count","games","map","game","appid","name","Math","floor","playtime_forever","round"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nrequire('dotenv').config();\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isLoaded: false,\n      steamId: process.env.REACT_APP_STEAM_ID\n    }\n  }\n\n  componentDidMount() {\n    fetch(`/IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${process.env.REACT_APP_STEAM_ID}&format=json&include_appinfo=true`,\n      {\n        \"headers\":\n        {\n          \"Accept\": \"application.json\"\n        }\n      })\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          isLoaded: true,\n          data: json.response\n        })\n      })\n      .catch(err => {\n        console.log(err)\n      });\n  }\n\n  handleChange(){\n    this.setState({ input: e.target.value });\n  }\n\n  handleClick() {\n    console.log(this.state.input);\n  }\n\n  render() {\n    var { isLoaded, data } = this.state;\n\n    if (!isLoaded) {\n      return <h2> Loading Data, Please Wait... </h2>\n    }\n    else if (data.game_count) {\n      return (\n        <div className=\"App\">\n          <h1>Game List for ID: {process.env.REACT_APP_STEAM_ID}</h1>\n          <input\n          type=\"text\" \n          value={this.state.steamId}          \n          onChange={e => this.handleChange(e.target.value)}\n          />\n          <h2>Game Count: {data.game_count}</h2>\n          <ul>\n          {data.games.map(game => (\n            <li key= {game.appid}>\n              <strong>{game.name}:</strong> {Math.floor(game.playtime_forever / 60)} hours, {Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60)}minutes.\n            </li>\n          ))};                    \n          </ul>\n        </div>\n      );\n    }\n    else{\n      return <h2> Issue Connecting to Steam API Service... </h2>\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}