{"ast":null,"code":"var _jsxFileName = \"C:\\\\steamAPI-Test-Project\\\\reactapi\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\n\nrequire('dotenv').config();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalHours: 0,\n      gamesResponse: [],\n      playerResponse: [],\n      isLoaded: false,\n      steamId: process.env.REACT_APP_STEAM_ID,\n      currentId: process.env.REACT_APP_STEAM_ID,\n      invalidId: false\n    };\n  }\n\n  componentDidMount() {\n    this.handleGamesRequest();\n  }\n\n  handleGamesRequest() {\n    fetch(`IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${this.state.steamId}&format=json&include_played_free_games&include_appinfo=true`, {\n      \"headers\": {\n        \"Accept\": \"application.json\"\n      }\n    }).then(res => res.json()).then(json => {\n      this.setState({\n        isLoaded: true,\n        gamesResponse: json.response,\n        invalidId: false\n      });\n    }).then(this.handlePlayerRequest()).catch(err => {\n      console.log(\"Error, Invalid Steam ID\");\n      this.setState({\n        steamId: this.state.currentId,\n        invalidId: true\n      });\n      this.componentDidMount();\n    });\n  }\n\n  handlePlayerRequest() {\n    fetch(`ISteamUser/GetPlayerSummaries/v0002/?key=${process.env.REACT_APP_API_KEY}&steamids=${this.state.steamId}`, {\n      \"headers\": {\n        \"Accept\": \"application.json\"\n      }\n    }).then(res => res.json()).then(json => {\n      this.setState({\n        playerResponse: json.response\n      });\n    }).catch();\n  }\n\n  handleTextInput(e) {\n    var reg = /^\\d+$/;\n\n    if (reg.test(e[e.length - 1])) {\n      this.setState({\n        steamId: e\n      });\n    }\n  }\n\n  handleButtonClick() {\n    this.componentDidMount();\n  }\n\n  calculateTimePlayed(gamesArray) {\n    let totalPlayTime = 0;\n    gamesArray.forEach(game => {\n      totalPlayTime = game.playtime_forever + totalPlayTime;\n    });\n\n    if (totalPlayTime === 0) {\n      return \"Games of specified user private, please modify in the steam client settings before proceeding.\";\n    }\n\n    return `Total Time Played: ${Math.floor(totalPlayTime / 60)} hours, ${Math.round((totalPlayTime / 60 - Math.floor(totalPlayTime / 60)) * 60)}minutes.`;\n  }\n\n  displayGames(gamesResponse) {\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, gamesResponse.games.map(game => React.createElement(\"li\", {\n      key: game.appid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, game.name, \":\"), \" \", Math.floor(game.playtime_forever / 60), \" hours, \", Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60), \"minutes.\")), \";\");\n  }\n\n  render() {\n    var {\n      isLoaded,\n      gamesResponse,\n      steamId,\n      currentId,\n      playerResponse\n    } = this.state;\n\n    if (!isLoaded) {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \" Loading Data, Please Wait... \");\n    } else if (gamesResponse.game_count && playerResponse.players.length > 0) {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Game List for ID: \", currentId, \", \", playerResponse.players[0].personaname), React.createElement(\"input\", {\n        type: \"text\",\n        value: steamId,\n        onChange: e => this.handleTextInput(e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"btn\",\n        type: \"button\",\n        value: \"Submit\",\n        onClick: e => this.handleButtonClick(e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, this.calculateTimePlayed(gamesResponse.games)), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Game Count: \", gamesResponse.game_count), this.displayGames(gamesResponse));\n    } else {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \" Issue Processing Request, Please Try Again. \");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/steamAPI-Test-Project/reactapi/src/App.js"],"names":["React","Component","require","config","App","constructor","props","state","totalHours","gamesResponse","playerResponse","isLoaded","steamId","process","env","REACT_APP_STEAM_ID","currentId","invalidId","componentDidMount","handleGamesRequest","fetch","REACT_APP_API_KEY","then","res","json","setState","response","handlePlayerRequest","catch","err","console","log","handleTextInput","e","reg","test","length","handleButtonClick","calculateTimePlayed","gamesArray","totalPlayTime","forEach","game","playtime_forever","Math","floor","round","displayGames","games","map","appid","name","render","game_count","players","personaname","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nrequire('dotenv').config();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalHours: 0,\n      gamesResponse: [],\n      playerResponse: [],\n      isLoaded: false,\n      steamId: process.env.REACT_APP_STEAM_ID,\n      currentId: process.env.REACT_APP_STEAM_ID,\n      invalidId: false\n    }\n  }\n\n  componentDidMount() {\n    this.handleGamesRequest();\n  }\n\n  handleGamesRequest() {\n    fetch(`IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${this.state.steamId}&format=json&include_played_free_games&include_appinfo=true`,\n      {\n        \"headers\":\n        {\n          \"Accept\": \"application.json\"\n        }\n      })\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          isLoaded: true,\n          gamesResponse: json.response,\n          invalidId: false\n        })\n      })\n      .then(this.handlePlayerRequest())\n      .catch(err => {\n        console.log(\"Error, Invalid Steam ID\");\n        this.setState({\n          steamId: this.state.currentId,\n          invalidId: true\n        })\n        this.componentDidMount();\n      });\n  }\n\n  handlePlayerRequest() {\n    fetch(`ISteamUser/GetPlayerSummaries/v0002/?key=${process.env.REACT_APP_API_KEY}&steamids=${this.state.steamId}`,\n      {\n        \"headers\":\n        {\n          \"Accept\": \"application.json\"\n        }\n      })\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          playerResponse: json.response,\n        })\n      })\n      .catch()\n  }\n\n  handleTextInput(e) {\n    var reg = /^\\d+$/\n    if (reg.test(e[e.length - 1])) {\n      this.setState({ steamId: e });\n    }\n  }\n\n  handleButtonClick() {\n    this.componentDidMount();\n  }\n\n  calculateTimePlayed(gamesArray) {\n    let totalPlayTime = 0;\n    gamesArray.forEach(game => {\n      totalPlayTime = game.playtime_forever + totalPlayTime;\n    });\n    if (totalPlayTime === 0) {\n      return \"Games of specified user private, please modify in the steam client settings before proceeding.\"\n    }\n    return `Total Time Played: ${Math.floor(totalPlayTime / 60)} hours, ${Math.round((totalPlayTime / 60 - Math.floor(totalPlayTime / 60)) * 60)}minutes.`\n  }\n\n  displayGames(gamesResponse) {\n    return (\n      <ul>\n        {gamesResponse.games.map(game => (\n          <li key={game.appid}>\n            <strong>{game.name}:</strong> {Math.floor(game.playtime_forever / 60)} hours, {Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60)}minutes.\n        </li>\n        ))};\n      </ul>)\n  }\n\n  render() {\n    var { isLoaded, gamesResponse, steamId, currentId, playerResponse } = this.state;\n\n    if (!isLoaded) {\n      return <h2> Loading Data, Please Wait... </h2>\n    }\n    else if (gamesResponse.game_count && playerResponse.players.length > 0) {\n      return (\n        <div className=\"App\">\n          <h1>Game List for ID: {currentId}, {playerResponse.players[0].personaname}</h1>\n          <input\n            type=\"text\"\n            value={steamId}\n            onChange={e => this.handleTextInput(e.target.value)}\n          />\n          <input\n            className=\"btn\"\n            type=\"button\"\n            value=\"Submit\"\n            onClick={e => this.handleButtonClick(e.target.value)}\n          />\n          <h2>{this.calculateTimePlayed(gamesResponse.games)}</h2>\n          <h2>Game Count: {gamesResponse.game_count}</h2>\n          {this.displayGames(gamesResponse)}\n        </div>\n      );\n    }\n    else {\n      return <h2> Issue Processing Request, Please Try Again. </h2>\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}