{"ast":null,"code":"var _jsxFileName = \"C:\\\\steamAPI-Test-Project\\\\reactapi\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\n\nrequire('dotenv').config();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalHours: 0,\n      gamesResponse: [],\n      playerResponse: [],\n      isLoaded: false,\n      steamId: process.env.REACT_APP_STEAM_ID,\n      currentId: process.env.REACT_APP_STEAM_ID,\n      invalidId: false\n    };\n  }\n\n  componentDidMount() {\n    fetch(`IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${this.state.steamId}&format=json&include_played_free_games&include_appinfo=true`, {\n      \"headers\": {\n        \"Accept\": \"application.json\"\n      }\n    }).then(res => res.json()).then(json => {\n      this.setState({\n        isLoaded: true,\n        gamesResponse: json.response,\n        invalidId: false\n      });\n    }).then(this.handlePlayerResponse()).catch(err => {\n      console.log(\"Error, Invalid Steam ID\");\n      this.setState({\n        steamId: this.state.currentId,\n        invalidId: true\n      });\n      this.componentDidMount();\n    });\n  }\n\n  handlePlayerResponse() {\n    fetch(`ISteamUser/GetPlayerSummaries/v0002/?key=${process.env.REACT_APP_API_KEY}&steamids=${this.state.steamId}`, {\n      \"headers\": {\n        \"Accept\": \"application.json\"\n      }\n    }).then(res => res.json()).then(json => {\n      this.setState({\n        playerResponse: json.response\n      });\n    }).catch();\n  }\n\n  handleChange(e) {\n    var reg = /^\\d+$/;\n\n    if (reg.test(e[e.length - 1])) {\n      this.setState({\n        steamId: e\n      });\n    } else {}\n  }\n\n  handleClick() {\n    this.componentDidMount();\n  }\n\n  totalHours(gamesList) {\n    let totalPlayTime = 0;\n    gamesList.forEach(game => {\n      totalPlayTime = game.playtime_forever + totalPlayTime;\n    });\n\n    if (totalPlayTime === 0) {\n      return \"Games of specified user private, please modify in the steam client settings before proceeding.\";\n    } else {}\n\n    return `Total Time Played: ${Math.floor(totalPlayTime / 60)} hours, ${Math.round((totalPlayTime / 60 - Math.floor(totalPlayTime / 60)) * 60)}minutes.`;\n  }\n\n  displayGames(gamesResponse) {\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, gamesResponse.games.map(game => React.createElement(\"li\", {\n      key: game.appid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, game.name, \":\"), \" \", Math.floor(game.playtime_forever / 60), \" hours, \", Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60), \"minutes.\")), \";\");\n  }\n\n  render() {\n    var {\n      isLoaded,\n      gamesResponse,\n      steamId,\n      currentId,\n      playerResponse\n    } = this.state;\n\n    if (!isLoaded) {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \" Loading Data, Please Wait... \");\n    } else if (gamesResponse.game_count && playerResponse.players.length > 0) {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Game List for ID: \", currentId, \", \", playerResponse.players[0].personaname), React.createElement(\"input\", {\n        type: \"text\",\n        value: steamId,\n        onChange: e => this.handleChange(e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"btn\",\n        type: \"button\",\n        value: \"Submit\",\n        onClick: e => this.handleClick(e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, this.totalHours(gamesResponse.games)), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Game Count: \", gamesResponse.game_count), this.displayGames(gamesResponse));\n    } else {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \" Issue Processing Request, Please Try Again. \");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/steamAPI-Test-Project/reactapi/src/App.js"],"names":["React","Component","require","config","App","constructor","props","state","totalHours","gamesResponse","playerResponse","isLoaded","steamId","process","env","REACT_APP_STEAM_ID","currentId","invalidId","componentDidMount","fetch","REACT_APP_API_KEY","then","res","json","setState","response","handlePlayerResponse","catch","err","console","log","handleChange","e","reg","test","length","handleClick","gamesList","totalPlayTime","forEach","game","playtime_forever","Math","floor","round","displayGames","games","map","appid","name","render","game_count","players","personaname","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nrequire('dotenv').config();\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalHours: 0,\n      gamesResponse: [],\n      playerResponse: [],\n      isLoaded: false,\n      steamId: process.env.REACT_APP_STEAM_ID,\n      currentId: process.env.REACT_APP_STEAM_ID,\n      invalidId: false\n    }\n  }\n\n  componentDidMount() {\n    fetch(`IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${this.state.steamId}&format=json&include_played_free_games&include_appinfo=true`,\n      {\n        \"headers\":\n        {\n          \"Accept\": \"application.json\"\n        }\n      })\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          isLoaded: true,\n          gamesResponse: json.response,\n          invalidId: false\n        })\n      })\n      .then(this.handlePlayerResponse())\n      .catch(err => {\n        console.log(\"Error, Invalid Steam ID\");\n        this.setState({\n          steamId: this.state.currentId,\n          invalidId: true\n        })\n        this.componentDidMount();\n      });\n  }\n\n  handlePlayerResponse() {\n    fetch(`ISteamUser/GetPlayerSummaries/v0002/?key=${process.env.REACT_APP_API_KEY}&steamids=${this.state.steamId}`,\n      {\n        \"headers\":\n        {\n          \"Accept\": \"application.json\"\n        }\n      })\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          playerResponse: json.response,\n        })\n      })\n      .catch()\n  }\n\n  handleChange(e) {\n    var reg = /^\\d+$/\n    if (reg.test(e[e.length - 1])) {\n      this.setState({ steamId: e });\n    }\n    else {\n\n    }\n  }\n\n  handleClick() {\n    this.componentDidMount();\n  }\n\n  totalHours(gamesList) {\n    let totalPlayTime = 0;\n    gamesList.forEach(game => {\n      totalPlayTime = game.playtime_forever + totalPlayTime;\n    });\n    if (totalPlayTime === 0) {\n      return \"Games of specified user private, please modify in the steam client settings before proceeding.\"\n    }\n    else {\n\n    }\n    return `Total Time Played: ${Math.floor(totalPlayTime / 60)} hours, ${Math.round((totalPlayTime / 60 - Math.floor(totalPlayTime / 60)) * 60)}minutes.`\n  }\n\n  displayGames(gamesResponse) {\n    return (\n      <ul>\n        {gamesResponse.games.map(game => (\n          <li key={game.appid}>\n            <strong>{game.name}:</strong> {Math.floor(game.playtime_forever / 60)} hours, {Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60)}minutes.\n        </li>\n        ))};\n      </ul>)\n  }\n\n  render() {\n    var { isLoaded, gamesResponse, steamId, currentId, playerResponse } = this.state;\n\n    if (!isLoaded) {\n      return <h2> Loading Data, Please Wait... </h2>\n    }\n    else if (gamesResponse.game_count && playerResponse.players.length > 0) {\n      return (\n        <div className=\"App\">\n          <h1>Game List for ID: {currentId}, {playerResponse.players[0].personaname}</h1>\n          <input\n            type=\"text\"\n            value={steamId}\n            onChange={e => this.handleChange(e.target.value)}\n          />\n          <input\n            className=\"btn\"\n            type=\"button\"\n            value=\"Submit\"\n            onClick={e => this.handleClick(e.target.value)}\n          />\n          <h2>{this.totalHours(gamesResponse.games)}</h2>\n          <h2>Game Count: {gamesResponse.game_count}</h2>\n          {this.displayGames(gamesResponse)}\n        </div>\n      );\n    }\n    else {\n      return <h2> Issue Processing Request, Please Try Again. </h2>\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}