{"ast":null,"code":"var _jsxFileName = \"C:\\\\steamAPI-Test-Project\\\\reactapi\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\n\nrequire('dotenv').config();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalHours: 0,\n      data: [],\n      isLoaded: false,\n      steamId: process.env.REACT_APP_STEAM_ID,\n      currentId: process.env.REACT_APP_STEAM_ID,\n      invalidId: false,\n      gamesPrivate: false\n    };\n  }\n\n  componentDidMount() {\n    fetch(`IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${this.state.steamId}&format=json&include_appinfo=true`, {\n      \"headers\": {\n        \"Accept\": \"application.json\"\n      }\n    }).then(res => res.json()).then(json => {\n      this.setState({\n        isLoaded: true,\n        data: json.response,\n        currentId: this.state.steamId,\n        invalidId: false\n      });\n    }).catch(err => {\n      console.log(\"Error, Invalid Steam ID\");\n      this.setState({\n        steamId: this.state.currentId,\n        invalidId: true\n      });\n      this.componentDidMount();\n    });\n  }\n\n  handleChange(e) {\n    this.setState({\n      steamId: e\n    });\n  }\n\n  handleClick() {\n    this.componentDidMount();\n  }\n\n  handleInvalidId() {\n    if (this.state.invalidId) {\n      return \"Invalid Steam ID, Please try again.\";\n    } else {}\n  }\n\n  totalHours(gamesList) {\n    let totalPlayTime = 0;\n    gamesList.forEach(game => {\n      totalPlayTime = game.playtime_forever + totalPlayTime;\n    });\n\n    if (totalPlayTime === 0) {\n      return \"Games of specified user private, please modify in the steam client settings before proceeding.\";\n    } else {\n      this.setState({\n        gamesPrivate: true\n      });\n    }\n\n    return `Total Time Played: ${Math.floor(totalPlayTime / 60)} hours, ${Math.round((totalPlayTime / 60 - Math.floor(totalPlayTime / 60)) * 60)}minutes.`;\n  }\n\n  displayGames(data) {\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, data.games.map(game => React.createElement(\"li\", {\n      key: game.appid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, game.name, \":\"), \" \", Math.floor(game.playtime_forever / 60), \" hours, \", Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60), \"minutes.\")), \";\");\n  }\n\n  render() {\n    var {\n      isLoaded,\n      data,\n      steamId,\n      currentId\n    } = this.state;\n\n    if (!isLoaded) {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \" Loading Data, Please Wait... \");\n    } else if (data.game_count) {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Game List for ID: \", currentId), React.createElement(\"input\", {\n        type: \"text\",\n        value: steamId,\n        onChange: e => this.handleChange(e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"btn\",\n        type: \"button\",\n        value: \"Submit\",\n        onClick: e => this.handleClick(e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), this.handleInvalidId(), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, this.totalHours(data.games)), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Game Count: \", data.game_count), this.displayGames(data));\n    } else {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \" Issue Connecting to Steam API Service... (Steam Response Empty) \");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/steamAPI-Test-Project/reactapi/src/App.js"],"names":["React","Component","require","config","App","constructor","props","state","totalHours","data","isLoaded","steamId","process","env","REACT_APP_STEAM_ID","currentId","invalidId","gamesPrivate","componentDidMount","fetch","REACT_APP_API_KEY","then","res","json","setState","response","catch","err","console","log","handleChange","e","handleClick","handleInvalidId","gamesList","totalPlayTime","forEach","game","playtime_forever","Math","floor","round","displayGames","games","map","appid","name","render","game_count","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nrequire('dotenv').config();\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalHours: 0,\n      data: [],\n      isLoaded: false,\n      steamId: process.env.REACT_APP_STEAM_ID,\n      currentId: process.env.REACT_APP_STEAM_ID,\n      invalidId: false,\n      gamesPrivate: false\n    }\n  }\n\n  componentDidMount() {\n    fetch(`IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${this.state.steamId}&format=json&include_appinfo=true`,\n      {\n        \"headers\":\n        {\n          \"Accept\": \"application.json\"\n        }\n      })\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          isLoaded: true,\n          data: json.response,\n          currentId: this.state.steamId,\n          invalidId: false\n        })\n      })\n      .catch(err => {\n        console.log(\"Error, Invalid Steam ID\");\n        this.setState({\n          steamId: this.state.currentId,\n          invalidId: true\n        })\n        this.componentDidMount();\n      });\n  }\n\n  handleChange(e) {\n    this.setState({ steamId: e });\n  }\n\n  handleClick() {\n    this.componentDidMount();\n  }\n\n  handleInvalidId() {\n    if (this.state.invalidId) {\n      return \"Invalid Steam ID, Please try again.\"\n    }\n    else {\n      \n    }\n  }\n\n  totalHours(gamesList) {\n    let totalPlayTime = 0;\n    gamesList.forEach(game => {\n      totalPlayTime = game.playtime_forever + totalPlayTime;\n    });\n    if (totalPlayTime === 0) {\n      return \"Games of specified user private, please modify in the steam client settings before proceeding.\"\n    }\n    else {\n      this.setState({\n        gamesPrivate: true\n      })\n    }\n    return `Total Time Played: ${Math.floor(totalPlayTime / 60)} hours, ${Math.round((totalPlayTime / 60 - Math.floor(totalPlayTime / 60)) * 60)}minutes.`\n  }\n\n  displayGames(data) {\n    return (\n      <ul>\n        {data.games.map(game => (\n          <li key={game.appid}>\n            <strong>{game.name}:</strong> {Math.floor(game.playtime_forever / 60)} hours, {Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60)}minutes.\n        </li>\n        ))};\n      </ul>)\n  }\n\n  render() {\n    var { isLoaded, data, steamId, currentId } = this.state;\n\n    if (!isLoaded) {\n      return <h2> Loading Data, Please Wait... </h2>\n    }\n    else if (data.game_count) {\n      return (\n        <div className=\"App\">\n          <h1>Game List for ID: {currentId}</h1>\n          <input\n            type=\"text\"\n            value={steamId}\n            onChange={e => this.handleChange(e.target.value)}\n          />\n          <input\n            className=\"btn\"\n            type=\"button\"\n            value=\"Submit\"\n            onClick={e => this.handleClick(e.target.value)}\n          />\n          <br></br>\n          {this.handleInvalidId()}\n          <h2>{this.totalHours(data.games)}</h2>\n          <h2>Game Count: {data.game_count}</h2>\n          {this.displayGames(data)}\n        </div>\n      );\n    }\n    else {\n      return <h2> Issue Connecting to Steam API Service... (Steam Response Empty) </h2>\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}