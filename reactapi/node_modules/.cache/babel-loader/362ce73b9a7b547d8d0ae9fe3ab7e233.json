{"ast":null,"code":"var _jsxFileName = \"C:\\\\steamAPI-Test-Project\\\\reactapi\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\n\nrequire('dotenv').config();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isLoaded: false\n    };\n  }\n\n  componentDidMount() {\n    fetch(`/IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${process.env.REACT_APP_STEAM_ID}&format=json`, {\n      \"headers\": {\n        \"Accept\": \"application.json\"\n      }\n    }).then(res => res.json()).then(json => {\n      this.setState({\n        isLoaded: true,\n        data: json.response\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  determineNames(data) {\n    const arrayOfNames = [data.game_count];\n    const counter = 0;\n\n    for (const game in data.games) {\n      fetch(`/ISteamUserStats/GetSchemaForGame/v2/?key=${process.env.REACT_APP_API_KEY}&appid=${game.appid}`, {\n        \"headers\": {\n          \"Accept\": \"application.json\"\n        }\n      }).then(res => res.json()).then(json => {\n        arrayOfNames[counter] = json.game.gameName;\n      }).catch(err => {\n        console.log(err);\n      });\n      counter++;\n    }\n\n    return arrayOfNames;\n  }\n\n  render() {\n    var {\n      isLoaded,\n      data\n    } = this.state;\n\n    if (!isLoaded) {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \" Loading Data... \");\n    } else if (data.game_count) {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Game List for ID: \", process.env.REACT_APP_STEAM_ID), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Game Count: \", data.game_count), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, data.games.map(game => React.createElement(\"li\", {\n        key: game.appid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Game ID: \", game.appid, \" | Gametime Played: \", Math.floor(game.playtime_forever / 60), \" hours, \", Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60), \"minutes.\")), \";\"));\n    } else {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \" Issue Connecting to Steam API Service... \");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/steamAPI-Test-Project/reactapi/src/App.js"],"names":["React","Component","require","config","App","constructor","props","state","data","isLoaded","componentDidMount","fetch","process","env","REACT_APP_API_KEY","REACT_APP_STEAM_ID","then","res","json","setState","response","catch","err","console","log","determineNames","arrayOfNames","game_count","counter","game","games","appid","gameName","render","map","Math","floor","playtime_forever","round"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nrequire('dotenv').config();\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isLoaded: false,\n    }\n  }\n\n  componentDidMount() {\n    fetch(`/IPlayerService/GetOwnedGames/v0001/?key=${process.env.REACT_APP_API_KEY}&steamid=${process.env.REACT_APP_STEAM_ID}&format=json`,\n      {\n        \"headers\":\n        {\n          \"Accept\": \"application.json\"\n        }\n      })\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          isLoaded: true,\n          data: json.response\n        })\n      })\n      .catch(err => {\n        console.log(err)\n      });\n  }\n\n  determineNames( data ){\n    const arrayOfNames = [data.game_count];\n    const counter = 0;\n    for (const game in data.games) {\n      fetch(`/ISteamUserStats/GetSchemaForGame/v2/?key=${process.env.REACT_APP_API_KEY}&appid=${game.appid}` ,\n      {\n        \"headers\":\n        {\n          \"Accept\": \"application.json\"\n        }\n      })\n      .then(res => res.json())\n      .then(json => {        \n        arrayOfNames[counter] = json.game.gameName       \n      })\n      .catch(err => {\n        console.log(err)\n      });\n      counter++;    \n    }\n    return arrayOfNames;\n  }\n\n  render() {\n    var { isLoaded, data } = this.state;\n\n    if (!isLoaded) {\n      return <h2> Loading Data... </h2>\n    }\n    else if (data.game_count) {\n      return (\n        <div className=\"App\">\n          <h1>Game List for ID: {process.env.REACT_APP_STEAM_ID}</h1>\n          <h2>Game Count: {data.game_count}</h2>\n          <ul>\n          {data.games.map(game => (\n            <li key= {game.appid}>\n              Game ID: {game.appid} | Gametime Played: {Math.floor(game.playtime_forever / 60)} hours, {Math.round((game.playtime_forever / 60 - Math.floor(game.playtime_forever / 60)) * 60)}minutes.\n            </li>\n          ))};\n                    \n          </ul>\n        </div>\n      );\n    }\n    else{\n      return <h2> Issue Connecting to Steam API Service... </h2>\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}